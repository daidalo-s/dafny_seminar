@article{greenwade93,
    author  = "George D. Greenwade",
    title   = "The {C}omprehensive {T}ex {A}rchive {N}etwork ({CTAN})",
    year    = "1993",
    journal = "TUGBoat",
    volume  = "14",
    number  = "3",
    pages   = "342--351"
}
@article{dijkstra1989cruelty,
  title={On the cruelty of really teaching computing science},
  author={Dijkstra, Edsger W and others},
  journal={Communications of the ACM},
  volume={32},
  number={12},
  pages={1398--1404},
  year={1989}
}
@article{turing1936a,
  added-at = {2014-03-17T15:41:01.000+0100},
  annote = {Turing's famous demonstration of the formal limits on computation based on a proof that the {\em halting problem} is undecidable.},
  author = {Turing, Alan M.},
  biburl = {https://www.bibsonomy.org/bibtex/2b51d7b5c67fb98e0117bc176ee5fd5cf/fibso},
  interhash = {8ac1f5e961ff74849ab6f0c7348b9c9c},
  intrahash = {b51d7b5c67fb98e0117bc176ee5fd5cf},
  journal = {Proceedings of the London Mathematical Society},
  keywords = {halting},
  number = 42,
  pages = {230--265},
  timestamp = {2014-03-17T15:41:01.000+0100},
  title = {On Computable Numbers, with an Application to the {E}ntscheidungsproblem},
  url = {http://www.cs.helsinki.fi/u/gionis/cc05/OnComputableNumbers.pdf},
  volume = 2,
  year = 1936
}
@misc{Dafny,
  title = {{Dafny} Home page},
  howpublished = {\url{https://dafny.org}},
  note = {Accessed: 2023-05-04},
  key = {Dafny}
}
@misc{Z3,
  title = {{Z3} repository},
  howpublished = {\url{https://github.com/Z3Prover/z3}},
  note = {Accessed: 2023-05-04},
  key = {Z3}
}
@misc{Agda,
  title = {{Agda} repository},
  howpublished = {\url{https://github.com/agda/agda}},
  note = {Accessed: 2023-05-04},
  key = {Agda}
}
@misc{Coq,
  title = {{Coq} repository},
  howpublished = {\url{https://github.com/coq/coq}},
  note = {Accessed: 2023-05-04},
  key = {Coq}
}
@misc{Isabelle,
  title = {{Isabelle} Isabelle homepage},
  howpublished = {\url{https://isabelle.in.tum.de}},
  note = {Accessed: 2023-05-04},
  key = {Isabelle}
}
@misc{Lean,
  title = {{Lean} repository},
  howpublished = {\url{https://leanprover.github.io}},
  note = {Accessed: 2023-05-04},
  key = {Lean}
}
@article{Floyd1967Flowcharts,
  added-at = {2009-01-27T21:07:57.000+0100},
  author = {Floyd, Robert W.},
  biburl = {https://www.bibsonomy.org/bibtex/22fa3c50b3386ec2f640eb8bfaedaa7db/tmcphillips},
  description = {A formal grammar for flowcharts.},
  interhash = {bd9dee412b9a403b9fa1f1b2f0032f36},
  intrahash = {2fa3c50b3386ec2f640eb8bfaedaa7db},
  journal = {Proceedings of Symposium on Applied Mathematics},
  keywords = {FormalLanguages},
  pages = {19-32},
  timestamp = {2009-01-27T22:39:35.000+0100},
  title = {Assigning Meanings to Programs},
  url = {http://laser.cs.umass.edu/courses/cs521-621.Spr06/papers/Floyd.pdf},
  volume = 19,
  year = 1967
}
@book{institute1947planning,
  title={Planning and Coding of Problems for an Electronic Computing Instrument},
  author={Institute for Advanced Study (Princeton, N.J.) and Goldstine, H.H. and Von Neumann, J.},
  number={v. 1},
  series={Planning and Coding of Problems for an Electronic Computing Instrument},
  url={https://books.google.it/books?id=yBEXnQEACAAJ},
  year={1947},
  publisher={Institute for Advanced Study}
}
@article{Hoare1969AnAB,
  title={An axiomatic basis for computer programming},
  author={Charles Antony Richard Hoare},
  journal={Commun. ACM},
  year={1969},
  volume={12},
  pages={576-580}
}
@article{10.1145/360933.360975,
author = {Dijkstra, Edsger W.},
title = {Guarded Commands, Nondeterminacy and Formal Derivation of Programs},
year = {1975},
issue_date = {Aug. 1975},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {8},
issn = {0001-0782},
url = {https://doi.org/10.1145/360933.360975},
doi = {10.1145/360933.360975},
abstract = {So-called “guarded commands” are introduced as a building block for alternative and repetitive constructs that allow nondeterministic program components for which at least the activity evoked, but possibly even the final state, is not necessarily uniquely determined by the initial state. For the formal derivation of programs expressed in terms of these constructs, a calculus will be be shown.},
journal = {Commun. ACM},
month = {aug},
pages = {453–457},
numpages = {5},
keywords = {programming languages, termination, sequencing primitives, derivation of programs, programming methodology, program semantics, repetition, nondeterminancy, case-construction, programming language semantics, correctness proof}
}
@misc{Boogie,
  title = {{Boogie} homepage},
  howpublished = {\url{https://boogie-docs.readthedocs.io/en/latest/}},
  note = {Accessed: 2023-05-11},
  key = {Boogie}
}
@misc{Brhl,
  title = {{Background} reading on Hoare logic},
  howpublished = {\url{https://www.cl.cam.ac.uk/archive/mjcg/HL/Notes/Notes.pdf}},
  note = {Accessed: 2023-05-14},
  key = {Background reading on Hoare logic},
  author = {Mike Gordon}
}
@inproceedings{Kassios2006DynamicFS,
  title={Dynamic Frames: Support for Framing, Dependencies and Sharing Without Restrictions},
  author={Ioannis T. Kassios},
  booktitle={World Congress on Formal Methods},
  year={2006}
}
@misc{Dfav,
  title = {{Background} reading on Hoare logic},
  howpublished = {\url{https://pm.inf.ethz.ch/publications/Kassios11.pdf}},
  note = {Accessed: 2023-05-14},
  key = {Dynamic frames and automated verification},
  author = {Ioannis T. Kassios}
}
% Aggiungi fonte esempio dynamic frames
@InProceedings{10.1007/978-3-642-03013-0_8,
author="Smans, Jan
and Jacobs, Bart
and Piessens, Frank",
editor="Drossopoulou, Sophia",
title="Implicit Dynamic Frames: Combining Dynamic Frames and Separation Logic",
booktitle="ECOOP 2009 -- Object-Oriented Programming",
year="2009",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="148--172",
abstract="The dynamic frames approach has proven to be a powerful formalism for specifying and verifying object-oriented programs. However, it requires writing and checking many frame annotations. In this paper, we propose a variant of the dynamic frames approach that eliminates the need to explicitly write and check frame annotations. Reminiscent of separation logic's frame rule, programmers write access assertions inside pre- and postconditions instead of writing frame annotations. From the precondition, one can then infer an upper bound on the set of locations writable or readable by the corresponding method. We implemented our approach in a tool, and used it to automatically verify several challenging programs, including subject-observer, iterator and linked list.",
isbn="978-3-642-03013-0"
}
% Qua aggiungi la homepage di dafny di microsoft
@misc{Dafny_homepage,
  title = {{Dafny} homepage},
  howpublished = {\url{https://www.microsoft.com/en-us/research/project/dafny-a-language-and-program-verifier-for-functional-correctness/}},
  note = {Accessed: 2023-05-16},
  key = {Dafny homepage},
}
% Rustan da amazon
@misc{Rustan_amazon,
  title = {{Dafny} at Amazon},
  howpublished = {\url{https://www.amazon.science/working-at-amazon/rustan-leino-provides-proof-that-software-is-bug-free}},
  note = {Accessed: 2023-05-16},
  key = {Amazon science},
}
% Guida migrazione Dafny
@misc{Dafny_migration,
  title = {{Dafny} migration guide},
  howpublished = {\url{https://github.com/dafny-lang/ide-vscode/wiki/Quick-migration-guide-from-Dafny-3.X-to-Dafny-4.0}},
  note = {Accessed: 2023-05-16},
  key = {Dafny migration guide},
}
% Boogie
@misc{Boogie_homepage,
  title = {{Boogie} homepage},
  howpublished = {\url{https://www.microsoft.com/en-us/research/project/boogie-an-intermediate-verification-language/}},
  note = {Accessed: 2023-05-17},
  key = {Boogie homepage},
}
% Chalice: 
@misc{Chalice_homepage,
  title = {{Chalice} homepage},
  howpublished = {\url{https://www.microsoft.com/en-us/research/project/chalice/}},
  note = {Accessed: 2023-05-17},
  key = {Chalice homepage},
}
% Havoc: https://www.microsoft.com/en-us/research/project/havoc/
@misc{Havoc_homepage,
  title = {{Havoc} homepage},
  howpublished = {\url{https://www.microsoft.com/en-us/research/project/havoc/}},
  note = {Accessed: 2023-05-17},
  key = {Havoc homepage},
}
% Rustan che parla di come tradurre in Boogie
@inproceedings{leino2008specification,
author = {Leino, Rustan},
title = {Specification and Verification of Object-Oriented Software},
booktitle = {Marktoberdorf International Summer School 2008},
year = {2008},
month = {June},
abstract = {The specification of object-oriented and other pointer-based programs must be able to describe the structure of the program’s dynamically allocated data as well as some abstract view of what the code implements. The verification of such programs can be done by generating logical verification conditions from the program and its specifications and then analyzing the verification conditions by a mechanical theorem prover.
In these lecture notes, I present an object-based language, Dafny, whose specifications use the style of dynamic frames. I show how to write and specify programs in Dafny. Most of the material is devoted to how to build a first-order automatic program verifier for Dafny programs, generating the verification conditions as input to an automatic satisfiability-modulo-theories solver.},
url = {https://www.microsoft.com/en-us/research/publication/specification-verification-object-oriented-software/},
edition = {Marktoberdorf International Summer School 2008},
}
% Lavoro su SMT
@misc{SMT_applications,
  title = {{Applications} of SMT solvers to Program Verification},
  howpublished = {\url{https://fm.csl.sri.com/SSFT14/smt-application-chapter.pdf}},
  author = {de Moura Leonardo, Bjørner Nikolaj},
  key = {Applications of SMT solvers to Program Verification}
}
% Z3 sito microsoft
@misc{Z3_microsoft,
  title = {{Z3}},
  howpublished = {\url{https://www.microsoft.com/en-us/research/project/z3-3/}},
  note = {Accessed: 2023-05-18},
  key = {Z3 homepage},
}
% Fonte informazioni SMT
@misc{SMT_appetizer,
  title = {{Satisfiability} Modulo Theories: An Appetizer},
  howpublished = {\url{https://leodemoura.github.io/files/sbmf09.pdf}},
  note = {Accessed: 2023-05-18},
  author = {Leonardo de Moura, Nikolaj Bjørner},
  key = {Satisfiability Modulo Theories: An Appetizer},
}
% Reference manual Dafny 
@misc{Dafny_ref_manual,
  title = {{Dafny} reference manual},
  howpublished = {\url{https://dafny.org/dafny/DafnyRef/DafnyRef}},
  key = {Dafny reference manual},
}

% Esempio SMT solver
@misc{SMTsolver_ex,
  title = {{Lecture} Notes: Satisfiability Modulo Theories},
  howpublished = {\url{https://www.cs.cmu.edu/~aldrich/courses/17-355-19sp/notes/notes12-smt.pdf}},
  author = {Jonathan Aldrich}
}

% Esempio decreases
@misc{Decreases_ex,
  title = {{Using} Dafny, an Automatic Program Verifier},
  howpublished = {\url{https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=550f6dc3565f0b7a71b8eaf5946852fc2a2dd9fc}},
  author = {Luke Herbert, K. Rustan M. Leino, Jose Quaresma}
}
